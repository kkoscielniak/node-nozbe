{"version":3,"file":"node-nozbe.js","sources":["../src/config.js","../src/oauth.js","../src/task.js","../src/comment.js","../src/project.js","../src/index.js"],"sourcesContent":["const API_URL = 'https://api.nozbe.com:3000';\n\nexports = module.exports = {\n  REGISTER_APP: `${API_URL}/oauth/secret/create`,\n  OAUTH_CLIENT_DATA: `${API_URL}/oauth/secret/data`,\n  LOGIN: `${API_URL}/login`,\n  LIST: `${API_URL}/list`,\n  TASK: `${API_URL}/task`,\n  COMMENT: `${API_URL}/task/comment`,\n};\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\n/**\n * Registers application to be used with Nozbe\n * @param {string} email Developer's e-mail\n * @param {string} password Developer's password\n * @param {string} redirectUri The application's register URI\n * @return {Promise} OAuth data for registered application\n */\nexports.registerApp = async (email, password, redirectUri) => {\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: config.REGISTER_APP,\n      data: qs.stringify({\n        email,\n        password,\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return (err.response.data);\n  }\n};\n\n/**\n * Fetches OAuth data of registered application\n * @param {string} email Developer's e-mail\n * @param {string} password Developer's password\n * @return {Promise} OAuth data\n */\nexports.getOAuthClientData = async (email, password) => {\n  try {\n    const params = {\n      email,\n      password,\n    };\n\n    const response = await axios.get(config.OAUTH_CLIENT_DATA, {\n      params,\n    });\n\n    return response.data;\n  } catch (err) {\n    return (err.response.data);\n  }\n};\n\n/**\n * Returns URL to login form\n * @param {string} clientId Application ID\n * @return {string} Login form URL\n */\nexports.getOAuthLoginURL = clientId => {\n  if (!clientId) {\n    throw new Error('No clientId provided');\n  }\n\n  return `${config.LOGIN}/?client_id=${clientId}`;\n};\n\n/**\n * Updates OAuth redirect URI\n * @param {string} clientId Existing Application ID\n * @param {string} clientSecret Existing Client Secret\n * @param {string} redirectUri URI to be redirected to after successful login\n * @return {Promise} OAUth data\n */\nexports.updateOAuthRedirectUri = async (clientId, clientSecret, redirectUri) => {\n  try {\n    const response = await axios({\n      method: 'PUT',\n      url: `${config.OAUTH_CLIENT_DATA}?client_id=${clientId}&secret_token=${clientSecret}`,\n      data: qs.stringify({\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return (err.response.data);\n  }\n};\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\n/**\n * Retrieves a full list of tasks\n * @param {string} clientId\n * @param {string} accessToken\n * @return {Promise} Tasks data\n */\nexports.getListOfTasks = async(clientId, accessToken) => {\n  try {\n    const params = {\n      client_id: clientId,\n      type: 'task',\n    };\n\n    const response = await axios.get(config.LIST, {\n      params,\n      headers: {\n        Authorization: accessToken,\n      },\n    });\n\n    return response.data;\n  } catch (err) {\n    return err.response.data;\n  }\n};\n\n/**\n * Adds new task to the project\n * @param {string} clientId Application ID\n * @param {string} accessToken Users access token\n * @param {object} task Object containing task parameters\n * @param {string} task.name Name of the task (**required**)\n * @param {string} task.projectId ID of the project task should be added to. If not passed, the task will be added to the Inbox\n * @param {boolean} task.completed Completeness flag for the task\n * @param {array} task.contexts Array of contexts to be assigned to the task\n * @param {string} task.dateTime Date and time of the reminder in \"Y-m-d H:M:s\" format\n * @param {boolean} task.next Next action flag for the task\n * @param {string} task.user User ID the task should be assigned for\n * @param {number} task.time Time needed to accomplish the task (in minutes)\n * @param {number} task.recur Recurrency of the task where<br>\n * `0`: do not repeat (default)<br>\n * `1`: every day<br>\n * `2`: every week day<br>\n * `3`: every week<br>\n * `4`: every 2 weeks<br>\n * `5`: every month<br>\n * `6`: every half of a year<br>\n * `7`: every year<br>\n * `8`: every 3 weeks<br>\n * `9`: every 2 months<br>\n * `10`: every 3 months<br>\n * `11`: every 2 years<br>\n * `12`: every 2 days<br>\n * `13`: every 4 weeks<br>\n * @return {Promise} Added task data\n */\nexports.addTask = async(clientId, accessToken, task) => {\n  const {\n    name,\n    projectId,\n    completed,\n    contexts,\n    dateTime,\n    next,\n    user,\n    recur,\n    time,\n  } = task;\n\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: config.TASK,\n      headers: {\n        Authorization: accessToken,\n      },\n      data: qs.stringify({\n        client_id: clientId,\n        name,\n        project_id: projectId || false,\n        completed: completed || false,\n        con_list: contexts || false,\n        datetime: dateTime || false,\n        next: next || false,\n        re_user: user || false,\n        recur: recur || 0,\n        time: time || 0,\n        comment_unread: false,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return err.response.data;\n  }\n};\n\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\n/**\n * Adds comment to particular task\n * @param {string} clientId Application ID\n * @param {string} accessToken Users access token\n * @param {object} comment Comment object **(required)**\n * @param {string} comment.taskId Comments ID **(required)**\n * @param {string} comment.body Comments content **(required)**\n * @param {string} comment.type Type of comment, where<br>\n * `markdown`: Comment in Markdown format<br>\n * `checklist`: Comment in following format:<br>\n * (+) marked checklist item<br>\n * (-) unmarked checklist item\n * @return {Promise} Modified task data **with comments**\n */\nexports.addComment = async(clientId, accessToken, comment) => {\n  const {\n    taskId,\n    type,\n    body,\n  } = comment;\n\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: config.COMMENT,\n      headers: {\n        Authorization: accessToken,\n      },\n      data: qs.stringify({\n        client_id: clientId,\n        task_id: taskId,\n        type: type || 'markdown',\n        body,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return err.response.data;\n  }\n};\n","const axios = require('axios');\n\nconst config = require('./config');\n\nconst sortComparator = (first, second) => {\n  if (first.name < second.name) {\n    return -1;\n  }\n  if (first.name > second.name) {\n    return 1;\n  }\n  return 0;\n};\n\n/**\n * Retrieves a complete list of projects\n * @param {string} clientId Application ID\n * @param {string} accessToken User access token\n * @param {object} options Request options\n * @param {boolean} options.sort Sort projects alphabetically. Inbox first.\n * @return {Promise} Projects\n */\nexports.getProjects = async(clientId, accessToken, { sort }) => {\n  try {\n    const params = {\n      client_id: clientId,\n      type: 'project',\n    };\n\n    const response = await axios.get(config.LIST, {\n      params,\n      headers: {\n        Authorization: accessToken,\n      },\n    });\n\n    const { data } = response;\n\n    if (!sort) {\n      return data;\n    }\n\n    return [\n      data[0],\n      ...data.slice(1).sort(sortComparator),\n    ];\n  } catch (err) {\n    return err.response.data;\n  }\n};\n","const oauth = require('./oauth');\nconst task = require('./task');\nconst comment = require('./comment');\nconst project = require('./project');\n\nexports.registerApp = module.exports.registerApp = oauth.registerApp;\nexports.getOAuthClientData = module.exports.getOAuthClientData = oauth.getOAuthClientData;\nexports.getOAuthLoginURL = module.exports.getOAuthLoginURL = oauth.getOAuthLoginURL;\nexports.updateOAuthRedirectUri = module.exports.updateOAuthRedirectUri = oauth.updateOAuthRedirectUri;\n\nexports.getListOfTasks = module.exports.getListOfTasks = task.getListOfTasks;\nexports.addTask = module.exports.addTask = task.addTask;\n\nexports.addComment = module.exports.addComment = comment.addComment;\n\nexports.getProjects = module.exports.getProjects = project.getProjects;\n"],"names":["API_URL","module","REGISTER_APP","OAUTH_CLIENT_DATA","LOGIN","LIST","TASK","COMMENT","async","email","password","redirectUri","axios","method","url","config","data","qs","stringify","redirect_uri","err","response","params","get","clientId","Error","clientSecret","accessToken","client_id","type","headers","Authorization","task","name","projectId","completed","contexts","dateTime","next","user","recur","time","project_id","con_list","datetime","re_user","comment_unread","comment","taskId","body","task_id","sortComparator","first","second","sort","slice","exports","oauth","project"],"mappings":"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"}