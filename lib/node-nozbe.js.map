{"version":3,"file":"node-nozbe.js","sources":["../src/config.js","../src/task.js","../src/index.js"],"sourcesContent":["const API_URL = 'https://api.nozbe.com:3000';\n\nexports = module.exports = {\n  REGISTER_APP: `${API_URL}/oauth/secret/create`,\n  GET_OAUTH_CLIENT_DATA: `${API_URL}/oauth/secret/data`,\n  LIST: `${API_URL}/list`,\n  TASK: `${API_URL}/task`,\n};\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\n/**\n * Adds new task to the project\n * @param {string} clientId Application ID\n * @param {string} accessToken Users access token\n * @param {object} task Object containing task parameters\n * @param {string} task.name Name of the task (**required**)\n * @param {string} task.projectId ID of the project task should be added to. If not passed, the task will be added to the Inbox\n * @param {boolean} task.completed Completeness flag for the task\n * @param {array} task.contexts Array of contexts to be assigned to the task\n * @param {string} task.dateTime Date and time of the reminder in \"Y-m-d H:M:s\" format\n * @param {boolean} task.next Next action flag for the task\n * @param {string} task.user User ID the task should be assigned for\n * @param {number} task.time Time needed to accomplish the task (in minutes)\n * @param {number} task.recur Recurrency of the task where<br>\n * `0`: do not repeat (default)<br>\n * `1`: every day<br>\n * `2`: every week day<br>\n * `3`: every week<br>\n * `4`: every 2 weeks<br>\n * `5`: every month<br>\n * `6`: every half of a year<br>\n * `7`: every year<br>\n * `8`: every 3 weeks<br>\n * `9`: every 2 months<br>\n * `10`: every 3 months<br>\n * `11`: every 2 years<br>\n * `12`: every 2 days<br>\n * `13`: every 4 weeks<br>\n * @return {object} Added task object\n */\nexports.addTask = async(clientId, accessToken, task) => {\n  const {\n    name,\n    projectId,\n    completed,\n    contexts,\n    dateTime,\n    next,\n    user,\n    recur,\n    time,\n  } = task;\n\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: config.TASK,\n      headers: {\n        Authorization: accessToken,\n      },\n      data: qs.stringify({\n        client_id: clientId,\n        name,\n        project_id: projectId || false,\n        completed: completed || false,\n        con_list: contexts || false,\n        datetime: dateTime || false,\n        next: next || false,\n        re_user: user || false,\n        recur: recur || 0,\n        time: time || 0,\n        comment_unread: false,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return err.response.data;\n  }\n};\n\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\nconst task = require('./task');\n\n/**\n * Registers the application to use with Nozbe\n * @param {string} email Developer's e-mail\n * @param {string} password Developer's password\n * @param {string} redirectUri The application's register URI\n * @return {object} OAuth data\n */\nconst registerApp = (email, password, redirectUri) => axios.post(\n  config.REGISTER_APP,\n  qs.stringify({\n    email,\n    password,\n    redirect_uri: redirectUri,\n  }),\n);\n\n/**\n * TODO:\n * Returns OAuth data of registered application\n * @param {string} email Developer's e-mail\n * @param {string} password Developer's password\n * @return {object} OAUth data\n */\nconst getOAuthClientData = async(email, password) => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: config.GET_OAUTH_CLIENT_DATA,\n      data: qs.stringify({\n        email,\n        password,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return (err.response.data);\n  }\n};\n\nconst getListOfTasks = (clientId, accessToken) => axios({\n  method: 'GET',\n  url: config.LIST,\n  headers: {\n    Authorization: accessToken,\n  },\n  data: qs.stringify({\n    client_id: clientId,\n    type: 'task',\n  }),\n});\n\nexports.registerApp = module.exports.registerApp = registerApp;\nexports.getOAuthClientData = module.exports.getOAuthClientData = getOAuthClientData;\nexports.getListOfTasks = module.exports.getListOfTasks = getListOfTasks;\nexports.addTask = module.exports.addTask = task.addTask;\n"],"names":["API_URL","module","REGISTER_APP","GET_OAUTH_CLIENT_DATA","LIST","TASK","async","clientId","accessToken","task","name","projectId","completed","contexts","dateTime","next","user","recur","time","axios","method","url","config","headers","Authorization","data","qs","stringify","client_id","project_id","con_list","datetime","re_user","comment_unread","err","response","exports","email","password","redirectUri","post","redirect_uri","type"],"mappings":"kcAAA,MAAMA,EAAU,6BAENC,WACRC,gBAAiBF,wBACjBG,yBAA0BH,sBAC1BI,QAASJ,SACTK,QAASL,oEC6BOM,MAAMC,EAAUC,EAAaC,KAC7C,MAAMC,KACJA,EAAIC,UACJA,EAASC,UACTA,EAASC,SACTA,EAAQC,SACRA,EAAQC,KACRA,EAAIC,KACJA,EAAIC,MACJA,EAAKC,KACLA,GACET,EAEJ,IAsBE,aArBuBU,GACrBC,OAAQ,OACRC,IAAKC,EAAOjB,KACZkB,SACEC,cAAehB,GAEjBiB,KAAMC,EAAGC,WACPC,UAAWrB,EACXG,KAAAA,EACAmB,WAAYlB,IAAa,EACzBC,UAAWA,IAAa,EACxBkB,SAAUjB,IAAY,EACtBkB,SAAUjB,IAAY,EACtBC,KAAMA,IAAQ,EACdiB,QAAShB,IAAQ,EACjBC,MAAOA,GAAS,EAChBC,KAAMA,GAAQ,EACde,gBAAgB,OAIJR,KAChB,MAAOS,GACP,OAAOA,EAAIC,SAASV,0BCbxBW,cAAsBnC,sBA7CF,EAACoC,EAAOC,EAAUC,IAAgBpB,EAAMqB,KAC1DlB,EAAOpB,aACPwB,EAAGC,WACDU,MAAAA,EACAC,SAAAA,EACAG,aAAcF,MAyClBH,qBAA6BnC,6BA9BFK,OAAM+B,EAAOC,KACtC,IAUE,aATuBnB,GACrBC,OAAQ,MACRC,IAAKC,EAAOnB,sBACZsB,KAAMC,EAAGC,WACPU,MAAAA,EACAC,SAAAA,OAIYb,KAChB,MAAOS,GACP,OAAQA,EAAIC,SAAa,QAkB7BC,iBAAyBnC,yBAdF,EAACM,EAAUC,IAAgBW,GAChDC,OAAQ,MACRC,IAAKC,EAAOlB,KACZmB,SACEC,cAAehB,GAEjBiB,KAAMC,EAAGC,WACPC,UAAWrB,EACXmC,KAAM,YAOVN,UAAkBnC,kBAAyBQ"}