{"version":3,"file":"node-nozbe.mjs","sources":["../src/config.js","../src/oauth.js","../src/task.js","../src/comment.js","../src/index.js"],"sourcesContent":["const API_URL = 'https://api.nozbe.com:3000';\n\nexports = module.exports = {\n  REGISTER_APP: `${API_URL}/oauth/secret/create`,\n  OAUTH_CLIENT_DATA: `${API_URL}/oauth/secret/data`,\n  LOGIN: `${API_URL}/login`,\n  LIST: `${API_URL}/list`,\n  TASK: `${API_URL}/task`,\n  COMMENT: `${API_URL}/task/comment`,\n};\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\n/**\n * Registers application to be used with Nozbe\n * @param {string} email Developer's e-mail\n * @param {string} password Developer's password\n * @param {string} redirectUri The application's register URI\n * @return {Promise} OAuth data for registered application\n */\nexports.registerApp = async(email, password, redirectUri) => {\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: config.REGISTER_APP,\n      data: qs.stringify({\n        email,\n        password,\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return (err.response.data);\n  }\n};\n\n/**\n * Fetches OAuth data of registered application\n * @param {string} email Developer's e-mail\n * @param {string} password Developer's password\n * @return {Promise} OAUth data\n */\nexports.getOAuthClientData = async(email, password) => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: config.OAUTH_CLIENT_DATA,\n      data: qs.stringify({\n        email,\n        password,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return (err.response.data);\n  }\n};\n\n/**\n * Returns URL to login form\n * @param {string} clientId Application ID\n * @return {string} Login form URL\n */\nexports.getOAuthLoginURL = clientId => {\n  if (!clientId) {\n    throw new Error('No clientId provided');\n  }\n\n  return `${config.LOGIN}/?client_id=${clientId}`;\n};\n\n/**\n * Updates OAuth redirect URI\n * @param {string} clientId Existing Application ID\n * @param {string} clientSecret Existing Client Secret\n * @param {string} redirectUri URI to be redirected to after successful login\n * @return {Promise} OAUth data\n */\nexports.updateOAuthRedirectUri = async(clientId, clientSecret, redirectUri) => {\n  try {\n    const response = await axios({\n      method: 'PUT',\n      url: `${config.OAUTH_CLIENT_DATA}?client_id=${clientId}&secret_token=${clientSecret}`,\n      data: qs.stringify({\n        redirect_uri: redirectUri,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return (err.response.data);\n  }\n};\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\n/**\n * Retrieves a full list of tasks\n * @param {string} clientId\n * @param {string} accessToken\n * @return {Promise} Tasks data\n */\nexports.getListOfTasks = async(clientId, accessToken) => {\n  try {\n    const response = await axios({\n      method: 'GET',\n      url: config.LIST,\n      headers: {\n        Authorization: accessToken,\n      },\n      data: qs.stringify({\n        client_id: clientId,\n        type: 'task',\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return err.response.data;\n  }\n};\n\n/**\n * Adds new task to the project\n * @param {string} clientId Application ID\n * @param {string} accessToken Users access token\n * @param {object} task Object containing task parameters\n * @param {string} task.name Name of the task (**required**)\n * @param {string} task.projectId ID of the project task should be added to. If not passed, the task will be added to the Inbox\n * @param {boolean} task.completed Completeness flag for the task\n * @param {array} task.contexts Array of contexts to be assigned to the task\n * @param {string} task.dateTime Date and time of the reminder in \"Y-m-d H:M:s\" format\n * @param {boolean} task.next Next action flag for the task\n * @param {string} task.user User ID the task should be assigned for\n * @param {number} task.time Time needed to accomplish the task (in minutes)\n * @param {number} task.recur Recurrency of the task where<br>\n * `0`: do not repeat (default)<br>\n * `1`: every day<br>\n * `2`: every week day<br>\n * `3`: every week<br>\n * `4`: every 2 weeks<br>\n * `5`: every month<br>\n * `6`: every half of a year<br>\n * `7`: every year<br>\n * `8`: every 3 weeks<br>\n * `9`: every 2 months<br>\n * `10`: every 3 months<br>\n * `11`: every 2 years<br>\n * `12`: every 2 days<br>\n * `13`: every 4 weeks<br>\n * @return {Promise} Added task data\n */\nexports.addTask = async(clientId, accessToken, task) => {\n  const {\n    name,\n    projectId,\n    completed,\n    contexts,\n    dateTime,\n    next,\n    user,\n    recur,\n    time,\n  } = task;\n\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: config.TASK,\n      headers: {\n        Authorization: accessToken,\n      },\n      data: qs.stringify({\n        client_id: clientId,\n        name,\n        project_id: projectId || false,\n        completed: completed || false,\n        con_list: contexts || false,\n        datetime: dateTime || false,\n        next: next || false,\n        re_user: user || false,\n        recur: recur || 0,\n        time: time || 0,\n        comment_unread: false,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return err.response.data;\n  }\n};\n\n","const axios = require('axios');\nconst qs = require('querystring');\n\nconst config = require('./config');\n\n/**\n * Adds comment to particular task\n * @param {string} clientId Application ID\n * @param {string} accessToken Users access token\n * @param {object} comment Comment object **(required)**\n * @param {string} comment.taskId Comments ID **(required)**\n * @param {string} comment.body Comments content **(required)**\n * @param {string} comment.type Type of comment, where<br>\n * `markdown`: Comment in Markdown format<br>\n * `checklist`: Comment in following format:<br>\n * (+) marked checklist item<br>\n * (-) unmarked checklist item\n * @return {Promise} Modified task data **with comments**\n */\nexports.addComment = async(clientId, accessToken, comment) => {\n  const {\n    taskId,\n    type,\n    body,\n  } = comment;\n\n  try {\n    const response = await axios({\n      method: 'POST',\n      url: config.COMMENT,\n      headers: {\n        Authorization: accessToken,\n      },\n      data: qs.stringify({\n        client_id: clientId,\n        task_id: taskId,\n        type: type || 'markdown',\n        body,\n      }),\n    });\n\n    return response.data;\n  } catch (err) {\n    return err.response.data;\n  }\n};\n","const oauth = require('./oauth');\nconst task = require('./task');\nconst comment = require('./comment');\n\nexports.registerApp = module.exports.registerApp = oauth.registerApp;\nexports.getOAuthClientData = module.exports.getOAuthClientData = oauth.getOAuthClientData;\nexports.getOAuthAccessToken = module.exports.getOAuthAccessToken = oauth.getOAuthAccessToken;\nexports.getOAuthLoginURL = module.exports.getOAuthLoginURL = oauth.getOAuthLoginURL;\nexports.updateOAuthRedirectUri = module.exports.updateOAuthRedirectUri = oauth.updateOAuthRedirectUri;\n\nexports.getListOfTasks = module.exports.getListOfTasks = task.getListOfTasks;\nexports.addTask = module.exports.addTask = task.addTask;\n\nexports.addComment = module.exports.addComment = comment.addComment;\n"],"names":["API_URL","module","REGISTER_APP","OAUTH_CLIENT_DATA","LOGIN","LIST","TASK","COMMENT","async","email","password","redirectUri","axios","method","url","config","data","qs","stringify","redirect_uri","err","response","clientId","Error","clientSecret","accessToken","headers","Authorization","client_id","type","task","name","projectId","completed","contexts","dateTime","next","user","recur","time","project_id","con_list","datetime","re_user","comment_unread","comment","taskId","body","task_id","exports","oauth","registerApp","getOAuthClientData","getOAuthAccessToken","getOAuthLoginURL","updateOAuthRedirectUri","getListOfTasks","addTask","addComment"],"mappings":"mLAAA,MAAMA,EAAU,6BAENC,WACRC,gBAAiBF,wBACjBG,qBAAsBH,sBACtBI,SAAUJ,UACVK,QAASL,SACTM,QAASN,SACTO,WAAYP,uLCIQQ,MAAMC,EAAOC,EAAUC,KAC3C,IAWE,aAVuBC,OACrBC,OAAQ,OACRC,IAAKC,OAAOb,aACZc,KAAMC,GAAGC,WACPT,MAAAA,EACAC,SAAAA,EACAS,aAAcR,OAIFK,KAChB,MAAOI,GACP,OAAQA,EAAIC,SAAa,0BAUAb,MAAMC,EAAOC,KACxC,IAUE,aATuBE,OACrBC,OAAQ,MACRC,IAAKC,OAAOZ,kBACZa,KAAMC,GAAGC,WACPT,MAAAA,EACAC,SAAAA,OAIYM,KAChB,MAAOI,GACP,OAAQA,EAAIC,SAAa,wBASFC,IACzB,IAAKA,EACH,MAAM,IAAIC,MAAM,wBAGlB,SAAUR,OAAOX,oBAAoBkB,4BAUNd,MAAMc,EAAUE,EAAcb,KAC7D,IASE,aARuBC,OACrBC,OAAQ,MACRC,OAAQC,OAAOZ,+BAA+BmB,kBAAyBE,IACvER,KAAMC,GAAGC,WACPC,aAAcR,OAIFK,KAChB,MAAOI,GACP,OAAQA,EAAIC,SAAa,4KC1EJb,MAAMc,EAAUG,KACvC,IAaE,aAZuBb,OACrBC,OAAQ,MACRC,IAAKC,OAAOV,KACZqB,SACEC,cAAeF,GAEjBT,KAAMC,GAAGC,WACPU,UAAWN,EACXO,KAAM,YAIMb,KAChB,MAAOI,GACP,OAAOA,EAAIC,SAASL,eAkCNR,MAAMc,EAAUG,EAAaK,KAC7C,MAAMC,KACJA,EAAIC,UACJA,EAASC,UACTA,EAASC,SACTA,EAAQC,SACRA,EAAQC,KACRA,EAAIC,KACJA,EAAIC,MACJA,EAAKC,KACLA,GACET,EAEJ,IAsBE,aArBuBlB,OACrBC,OAAQ,OACRC,IAAKC,OAAOT,KACZoB,SACEC,cAAeF,GAEjBT,KAAMC,GAAGC,WACPU,UAAWN,EACXS,KAAAA,EACAS,WAAYR,IAAa,EACzBC,UAAWA,IAAa,EACxBQ,SAAUP,IAAY,EACtBQ,SAAUP,IAAY,EACtBC,KAAMA,IAAQ,EACdO,QAASN,IAAQ,EACjBC,MAAOA,GAAS,EAChBC,KAAMA,GAAQ,EACdK,gBAAgB,OAIJ5B,KAChB,MAAOI,GACP,OAAOA,EAAIC,SAASL,uEC/EHR,MAAMc,EAAUG,EAAaoB,KAChD,MAAMC,OACJA,EAAMjB,KACNA,EAAIkB,KACJA,GACEF,EAEJ,IAeE,aAduBjC,OACrBC,OAAQ,OACRC,IAAKC,OAAOR,QACZmB,SACEC,cAAeF,GAEjBT,KAAMC,GAAGC,WACPU,UAAWN,EACX0B,QAASF,EACTjB,KAAMA,GAAQ,WACdkB,KAAAA,OAIY/B,KAChB,MAAOI,GACP,OAAOA,EAAIC,SAASL,8ECvCxBiC,cAAsBhD,sBAA6BiD,MAAMC,YACzDF,qBAA6BhD,6BAAoCiD,MAAME,mBACvEH,sBAA8BhD,8BAAqCiD,MAAMG,oBACzEJ,mBAA2BhD,2BAAkCiD,MAAMI,iBACnEL,yBAAiChD,iCAAwCiD,MAAMK,uBAE/EN,iBAAyBhD,yBAAgC6B,KAAK0B,eAC9DP,UAAkBhD,kBAAyB6B,KAAK2B,QAEhDR,aAAqBhD,qBAA4B4C,QAAQa"}